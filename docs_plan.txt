  I. `docs/` Folder Structure & Core Documents:


   1. `docs/index.md` (or docs/README.md)
       * Purpose: Landing page for the documentation.
       * Content:
           * Brief project overview (what it is, key goals).
           * How to navigate the documentation.
           * Links to all major sections below.


   2. `docs/getting-started.md`
       * Purpose: Guide new users through setup and first use.
       * Content:
           * Prerequisites.
           * Installation steps (for CLI, and server if applicable).
           * Initial configuration.
           * A "quick start" tutorial: running a few basic commands.


   3. `docs/architecture.md`
       * Purpose: Explain the high-level design.
       * Content:
           * Overview of the main components (CLI, Server, Tools).
           * How these components interact (e.g., CLI sends requests to Server, Server uses Tools).

  II. Component-Specific Documentation:


   4. `docs/cli/` (Sub-folder for CLI documentation)
       * `docs/cli/index.md`: Introduction to the CLI.
       * `docs/cli/commands.md`:
           * Detailed descriptions of all user-facing commands (e.g., built-in commands, syntax for @ and / commands if those are distinct categories).
           * Options, arguments, and examples for each.
       * `docs/cli/ui-guide.md`:
           * Explanation of the terminal interface elements (input prompt, history, suggestions, messages).
           * Information on themes and UI customization (themes/ directory).
       * `docs/cli/configuration.md`:
           * Details on CLI configuration files (e.g., packages/cli/src/config/).


   5. `docs/server/` (Sub-folder for Server documentation)
       * `docs/server/index.md`: Introduction to the server component.
       * `docs/server/configuration.md`:
           * Details on server configuration files (e.g., packages/server/src/config/).
       * `docs/server/tools-api.md`:
           * How the server manages and exposes tools.
           * (If applicable) How to develop or extend tools for the server.


   6. `docs/tools/` (Sub-folder for detailed Tool documentation)
       * `docs/tools/index.md`: Overview of available tools and their general usage philosophy.
       * Individual Files per Tool/Category:
           * docs/tools/file-system.md: Documenting list_directory, read_file, write_file, glob, replace, search_file_content.
           * docs/tools/shell.md: Documenting execute_bash_command.
           * docs/tools/web.md: Documenting web_fetch.
           * docs/tools/multi-file.md: Documenting read_many_files.
           * For each tool: purpose, arguments, examples, and any important notes on behavior or limitations.


  III. Supporting Documentation:


   7. `docs/development.md`
       * Purpose: Guide for contributors or those wanting to build/modify the project.
       * Content:
           * Setting up the development environment.
           * Build process (npm run build).
           * Running tests (npm run test), type checking, linting (npm run preflight).
           * Coding conventions (referencing GEMINI.md and CONTRIBUTING.md).


   8. `docs/troubleshooting.md`
       * Purpose: Help users resolve common issues.
       * Content:
           * FAQs.
           * Common error messages and solutions.
           * Debugging tips.

  Next Steps:


   * Create the docs/ directory at the root of the project.
   * Start populating these files.
   * Update the main README.md to link to docs/index.md for more detailed documentation.
