# .github/workflows/ci.yml

name: Gemini CLI CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build and Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read # For checkout
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run formatter check
        run: |
          npm run format
          git diff --exit-code

      - name: Run linter
        run: npm run lint

      - name: Run type check
        run: npm run typecheck

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.node-version }}
          path: |
            packages/*/dist
            packages/*/node_modules
            node_modules
            package-lock.json # Include root package-lock and node_modules for test job

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build # This job depends on the 'build' job
    permissions:
      contents: read # Not strictly needed if artifacts cover everything, but good practice
      checks: write
      pull-requests: write
    strategy:
      matrix:
        node-version: [20.x] # Should match the build job's matrix
    steps:
      - name: Checkout repository # Still needed for test files if not in artifacts
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm' # Cache can still be beneficial

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ matrix.node-version }}
          path: . # Download to the root

      # It's important to ensure the downloaded artifacts are placed correctly.
      # The 'path: .' for download-artifact might require restructuring or careful handling
      # if the upload paths create nested structures.
      # For simplicity, assuming flat structure or that npm test can find them.
      # If issues arise, we might need to explicitly move/restore node_modules.

      # Re-hydrate based on downloaded package-lock.json if needed,
      # or ensure node_modules from artifact is correctly placed.
      # A clean `npm ci` might be safer if artifacting node_modules is complex.
      # For now, assuming the artifacted node_modules are usable.
      # If not, remove node_modules from artifacts and run `npm ci` here.
      # Let's try with artifacted node_modules first.

      - name: Run tests
        run: npm test # This will now cause the 'Test' job to fail if tests fail

      - name: Publish Test Report
        uses: dorny/test-reporter@v1
        if: always() # Always run this step to publish results
        with:
          name: Test Results (Node ${{ matrix.node-version }})
          path: packages/*/junit.xml
          reporter: java-junit
          fail-on-error: 'false'
